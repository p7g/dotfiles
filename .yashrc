# enable bash-like extended expansion
set --brace-expand

# enable recursive pathname expansion
set --extended-glob

# don't implicitly expand non-existent variables to empty strings
set --unset

# if yash is built with command history enabled...
if command --identify --builtin-command history >/dev/null; then

  # don't save commands starting with a space in history
  set --hist-space

  # prevent clearing history by accident
  history()
  if [ -t 0 ] && (
    for arg do
      case "${arg}" in
        (-[drsw]?* | --*=*) ;;
        (-*c*) exit;;
      esac
    done
    false
  ) then
    printf 'history: seems you are trying to clear the whole history.\n' >&2
    printf 'are you sure? (yes/no) ' >&2
    case "$(head -n 1)" in
      ([Yy]*) command history "$@";;
      (*)     printf 'history: cancelled.\n' >&2;;
    esac
  else
    command history "$@"
  fi

fi

# if yash is built with line-editing enabled...
if command --identify --builtin-command bindkey >/dev/null; then

  # print job status update ASAP, but only while line-editing
  set --notify-le

  # some terminfo data are broken; meta flags have to be ignored for UTF-8
  set --le-no-conv-meta

  # most users are more familiar with emacs mode than vi mode
  if [ -o vi ]; then
    set --emacs
  fi

  # some useful key bindings
  bindkey --emacs '\^N' beginning-search-forward
  bindkey --emacs '\^O' clear-candidates
  bindkey --emacs '\^P' beginning-search-backward
  bindkey --emacs '\N' complete-next-column
  bindkey --emacs '\P' complete-prev-column

  # key bindings for vi mode, some of which are from emacs mode
  bindkey --vi-insert '\^A' beginning-of-line
  bindkey --vi-insert '\^B' backward-char
  bindkey --vi-insert '\^D' eof-or-delete
  bindkey --vi-insert '\#'  eof-or-delete
  bindkey --vi-insert '\^E' end-of-line
  bindkey --vi-insert '\^F' forward-char
  bindkey --vi-insert '\^K' forward-kill-line
  bindkey --vi-insert '\^N' beginning-search-forward
  bindkey --vi-insert '\^O' clear-candidates
  bindkey --vi-insert '\^P' beginning-search-backward
  bindkey --vi-insert '\^U' backward-kill-line
  bindkey --vi-insert '\$'  backward-kill-line
  bindkey --vi-insert '\^W' backward-delete-viword
  bindkey --vi-insert '\^Y' put-left
  bindkey --vi-insert '\N' complete-next-column
  bindkey --vi-insert '\P' complete-prev-column
  bindkey --vi-command '\^N' beginning-search-forward
  bindkey --vi-command '\^P' beginning-search-backward

fi

alias ll='ls -l'
alias la='ls -la'

# normally yash is more POSIX-compliant than /bin/sh :-)
sh() { yash --posix "$@"; }
yash() { command yash "$@"; }
# By re-defining 'yash' using the 'command' built-in, the 'jobs' built-in
# prints a command name that exposes the arguments like
# 'yash --posix -n foo.sh' rather than a command name that hides the
# arguments like 'yash --posix "${@}"'. This applies to the 'yash' command
# invoked via the 'sh' function.

# if the terminal supports color...
if [ "$(tput colors 2>/dev/null || echo 0)" -ge 8 ]; then

  # make command output colorful
  if ls --color=auto -d / >/dev/null 2>&1; then
    ls() { command ls --color=auto "$@"; }
  fi
  if grep --color=auto -q X '<<<X' 2>/dev/null; then
    grep() { command grep --color=auto "$@"; }
  fi
  if ggrep --color=auto -q X '<<<X' 2>/dev/null; then
    ggrep() { command ggrep --color=auto "$@"; }
  fi

fi

# if vim is available...
if command --identify vim >/dev/null 2>&1; then

  # prefer vim over vi
  vi() { vim "$@"; }
  view() { vim -R "$@"; }
  vim() { command vim "$@"; } # Re-definition hack. See above.

fi

# an alias that opens a file
if command --identify xdg-open >/dev/null 2>&1; then
  alias o='xdg-open'
elif command --identify cygstart >/dev/null 2>&1; then
  alias o='cygstart'
elif [ "$(uname)" = Darwin ] 2>/dev/null; then
  alias o='open'
fi

# define some basic variables if missing
: ${PAGER:=less} ${EDITOR:=vi} ${FCEDIT:=$EDITOR}
: ${LOGNAME:=$(logname)} ${HOSTNAME:=$(uname -n)}

# disable confusing treatment of arguments in the echo command
: ${ECHO_STYLE:=RAW}

# variables needed for command history
HISTFILE=~/.yash_history.d$(tty) HISTSIZE=5000
mkdir -p "$(dirname $HISTFILE)"
# HISTRMDUP makes prediction less accurate
# HISTRMDUP=500

# default mail check interval is too long
MAILCHECK=0

# emulate bash's $SHLVL
if [ "${_old_shlvl+set}" != set ]; then
  _old_shlvl=${SHLVL-}
fi
SHLVL=$((_old_shlvl+1)) 2>/dev/null || SHLVL=1
export SHLVL

# initialize event handlers
COMMAND_NOT_FOUND_HANDLER=()
PROMPT_COMMAND=()
YASH_AFTER_CD=()

prompt='%'
# define prompt
if [ "$(id -u)" -eq 0 ]; then
  _uc='\fr.'     # red username for root
  _2c='\fr.'     # red PS2 for root
  prompt='#'
else
  _uc= _hc=  # same username color as hostname for non-root user
  _2c=       # PS2 in normal color for non-root user
fi
# The main prompt ($PS1) contains the username, hostname, working directory,
# last exit status (only if non-zero), and $SHLVL (only if non-one).
PS1='${${${PWD:/~/\~}##*/}:-$PWD} ${{?:/0/}:+\\fr.$?\\fd. }${{SHLVL-0}:/1}$prompt '
PS1R='\fc.${_vcs_info}'
PS1S='\fo.'
PS2=$_2c'> '
PS2R=
PS2S=$PS1S
PS4='\fm.+ '
PS4S='\fmo.'
unset _hc _uc _2c

# find escape sequence to change terminal window title
case "$TERM" in
  (xterm|xterm[+-]*|gnome|gnome[+-]*|putty|putty[+-]*)
    _tsl='\033]0;' _fsl='\033\\' ;;
  (cygwin)
    _tsl='\033];' _fsl='\a' ;;
  (*)
    _tsl=$( (tput tsl 0; echo) 2>/dev/null |
    sed -e 's;\\;\\\\;g' -e 's;;\\033;g' -e 's;;\\a;g' -e 's;%;%%;g')
    _fsl=$( (tput fsl  ; echo) 2>/dev/null |
    sed -e 's;\\;\\\\;g' -e 's;;\\033;g' -e 's;;\\a;g' -e 's;%;%%;g') ;;
esac
# if terminal window title can be changed...
if [ "$_tsl" ] && [ "$_fsl" ]; then

  # set terminal window title on each prompt
  _set_term_title()
  if [ -t 2 ]; then
    printf "$_tsl"'%s@%s:%s'"$_fsl" "${LOGNAME}" "${HOSTNAME%%.*}" \
      "${${PWD:/$HOME/\~}/#$HOME\//\~\/}" >&2
  fi
  PROMPT_COMMAND=("$PROMPT_COMMAND" '_set_term_title')

  # reset window title when changing host or user
  ssh() {
    if [ -t 2 ]; then printf "$_tsl"'ssh %s'"$_fsl" "$*" >&2; fi
    command ssh "$@"
  }
  su() {
    if [ -t 2 ]; then printf "$_tsl"'su %s'"$_fsl" "$*" >&2; fi
    command su "$@"
  }
  sudo() {
    if [ -t 2 ]; then printf "$_tsl"'sudo %s'"$_fsl" "$*" >&2; fi
    command sudo "$@"
  }

fi

# define function that updates $_vcs_info and $_vcs_root
_update_vcs_info() {
  typeset type branch
  {
    read --raw-mode type
    read --raw-mode _vcs_root
    read --raw-mode branch
  } <(
    exec 2>/dev/null
    typeset COMMAND_NOT_FOUND_HANDLER=
    while true; do
      if [ -e .git ] || [ . -ef "${GIT_WORK_TREE-}" ]; then
        printf 'git\n%s\n' "${GIT_WORK_TREE:-$PWD}"
        git branch --no-color | sed -n '/^\*/s/^..//p'
        exit
      elif [ -d .hg ]; then
        printf 'hg\n%s\n' "$PWD"
        exec cat .hg/branch
      elif [ -d .svn ]; then
        printf 'svn\n'
        _vcs_root=$(svn info --show-item=wc-root)
        printf '%s\n' "$_vcs_root"
        path=$(svn info --show-item=relative-url)
        case $path in
          (*/branches/*)
            printf '%s\n' "${${path#*/branches/}%%/*}"
        esac
        exit
      fi
      if [ / -ef . ] || [ . -ef .. ]; then
        exit
      fi
      cd -P ..
    done
  )
  case "$type#$branch" in
    (hg#default) _vcs_info='hg';;
    (git#master) _vcs_info='git';;
    (*#        ) _vcs_info="$type";;
    (*         ) _vcs_info="$type@$branch";;
  esac
}
# update $_vcs_info on each prompt
PROMPT_COMMAND=("$PROMPT_COMMAND" '_update_vcs_info')

# print file type when executing non-executable files
_file_type()
if [ -e "$1" ] && ! [ -d "$1" ]; then
  file -- "$1"
fi
COMMAND_NOT_FOUND_HANDLER=("$COMMAND_NOT_FOUND_HANDLER" '_file_type "$@"')

alias source='.'

export PATH="/usr/local/bin:$PATH"

. ~/.profile

# vim: set et sw=2 sts=2 ft=sh:
